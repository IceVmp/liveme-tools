/*

	DataManager Module

*/

const 	low = require('lowdb'),
		FileSync = require('lowdb/adapters/FileSync'),
		fs = require('fs-extra'),
		path = require('path'),
		events = require('events'),
		axios = require('axios'),
		{ app } = require('electron'),
		LiveMe = require('liveme-api');

var		index = 0, adapter, db;

class DataManager {

	constructor() {
		this._favorites = [];
		this._visited = [];
		this.events = new (events.EventEmitter)();

		fs.ensureDirSync(path.join(app.getPath('appData'), app.getName()));
		adapter = new FileSync(path.join(app.getPath('appData'), app.getName(), 'livemetools_db.json'));
		db = low(adapter);
	}

	ResetDB() {
		db.defaults({
			favorites: [],
			visited: [],
			downloaded: []
		}).write();
	}

	commitDatabases() {
		db.write();
	}



	/*
		Favorites
	*/
	addFavorite(e) {

		LiveMe.getUserInfo(e.uid)
				.then(user => {

					db.get('favorites').push({
						id : user.user_info.uid,
						face: user.user_info.face,
						nickname: user.user_info.uname,
						sex: user.user_info.sex > -1 ? ( user.user_info.sex > 0 ? 'male' : 'female') : '',
						level: user.user_info.level,
						video_count: user.count_info.video_count,
						usign: user.user_info.usign,
						stars: user.user_info.stars
					}).write();

					var list = db.get('favorites').cloneDeep().value();
					this.events.emit('refresh_favorites', list);

				});
	}

	loadFavorites() {
		var list = db.get('favorites').cloneDeep().value();
		this.events.emit('refresh_favorites', list);
	}

	removeFavorite(u) {
		db.get('favorites').remove({ id: u }).write();
		this.loadFavorites();
	}


	updateFavorites() {
		var count = db.get('favorites').size().value();
		if (count == index) {
			index = 0;
		}

		index = 0;
		this._updateFavorites();

	}
	_updateFavorites() {
			LiveMe.getUserInfo(db.get('favorites['+index+'].id').value())
				.then(user => {

					db.get('favorites').find({ id: user.user_info.uid })
						.assign({ face: 	user.user_info.face })
						.assign({ nickname: user.user_info.nickname })
						.assign({ usign: 	user.user_info.usign })
						.assign({ level: 	user.user_info.level })
						.assign({ stars: 	user.user_info.stars })
						.assign({ sex: 		user.user_info.sex > -1 ? ( user.user_info.sex > 0 ? 'male' : 'female') : '' })
						.assign({ video_count: 	user.count_info.video_count })
						.write();

				});

		index++;

		var count = db.get('favorites').size().value();
		if (count == index) {
			index = 0;
			var list = db.get('favorites').cloneDeep().value();
			this.events.emit('refresh_favorites', list);
		} else {
			this._updateFavorites();
		}

	}

	isInFavorites(e) {
		var t = db.get('favorites').find({ id: e }).value();
		return (t == 'undefined' || typeof t == 'undefined' || t == null) ? false : true;
	}


	importFavorites(e) {
		fs.readFile(e, 'utf8', (err, data) => {
			if (err) {
				dialog.showErrorBox('Import Error', 'There was an error when attempting to import your favorites');
				console.error(err);
			} else {
				for (let id of data.split("\n")) {
					id = id.trim();

					if (id.startsWith('#') || id.length == 0) {
						continue;
					}

					if (this.isInFavorites(id)) {
						continue;
					}


					LiveMe.getUserInfo(id)
						.then(user => {

							db.get('favorites').find({ id: user.user_info.uid })
								.assign({ face: 	user.user_info.face })
								.assign({ nickname: user.user_info.nickname })
								.assign({ usign: 	user.user_info.usign })
								.assign({ level: 	user.user_info.level })
								.assign({ stars: 	user.user_info.stars })
								.assign({ sex: 		user.user_info.sex > -1 ? ( user.user_info.sex > 0 ? 'male' : 'female') : '' })
								.assign({ video_count: 	user.count_info.video_count })
								.write();

						});

				}

				this.updateFavorites();
			}
		});

	}
	exportFavorites(e) {
		var ids = "# Generated by LiveMe-Tools", list = db.get('favorites').cloneDeep().value()

		for (let o of list) {
			ids += "\n" + o.id;
		}

		fs.writeFile(e, ids, 'utf8', function(err) {
			if (err) {
				dialog.showErrorBox('Export Error', 'There was an error when attempting to export your favorites');
				console.error(err);
			}
		});

	}



	/*
		Tracking of Visited UserIds
	*/
	addTrackedVisited(e) {
		var t = db.get('visited').find({ id: e.id }).value();

		if (t == 'undefined' || typeof t == 'undefined' || t == null) {
			db.get('visited').push({
				id: e.id,
				dt: e.dt
			});

			setTimeout(function(){
				db.write();
			}, 100);
		}

	}
	dropTrackedVisited(e) {
		db.get('visited').remove({ id: e.id }).write();
	}
	wasVisited(e) {
		var dt = Math.floor(new Date().getTime() / 1000),
			t = db.get('visited').find({ id: e }).value();

		if (t == 'undefined' || typeof t == 'undefined' || t == null) return false;

		if ((dt - t.dt) > 0) {
			db.get('visited').remove({ id: e.id }).write();
			return false;
		} else {
			return true;
		}
	}



	/*
		Tracking of Downloaded Replays
	*/
	addDownloaded(e) {
		var t = db.get('downloaded').find({ id: e }).value();
		if (t == 'undefined' || typeof t == 'undefined' || t == null) {
			db.get('downloaded').push({
				id: e,
				dt: Math.floor(new Date().getTime() / 1000)
			}).write();
		}
	}
	wasDownloaded(e) {
		var t = db.get('downloaded').find({ id: e }).value();
		return (t == 'undefined' || typeof t == 'undefined' || t == null) ? false : true;
	}


}

exports.DataManager = DataManager;
